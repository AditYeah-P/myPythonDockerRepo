# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'd676875f-d1fb-485a-8da4-88d6bfb04604'
  imageRepository: 'mypythondockerrepo'
  containerRegistry: 'myacrrep31.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
   #Publish Build Information
    - task: Bash@3
      displayName: "Log Image Details"
      inputs:
        targetType: inline
        script: |
          echo "Pushed Image: $(containerRegistry)/$(imageRepository):$(tag)"
    # Install Trivy Scanner on Agent
    - task: Bash@3
      displayName: "Install Trivy"
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
    - task: Bash@3
      displayName: "Download JUnit Template"
      inputs:
        targetType: inline
        script: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/junit.tpl -o junit.tpl

    # Run Trivy Scan
    - task: Bash@3
      displayName: "Run Trivy Scan"
      inputs:
        targetType: inline
        script: |
          ./bin/trivy image --format template --template "junit.tpl" --output trivy-report.xml --severity HIGH,CRITICAL,MEDIUM --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)
    # Step 4: Publish Trivy XML Report as Artifact
    - task: PublishPipelineArtifact@1
      displayName: "Publish Trivy XML Report"
      inputs:
        targetPath: "$(System.DefaultWorkingDirectory)/trivy-report.xml"
        artifact: "TrivyReport"

    # Step 5: Publish Trivy Test Results
    - task: PublishTestResults@2
      displayName: "Publish Trivy Test Results"
      inputs:
        testResultsFiles: "$(System.DefaultWorkingDirectory)/trivy-report.xml"